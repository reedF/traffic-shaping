
#user  nobody;
worker_processes  2;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  65535;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;
	
	lua_package_path "$prefix/?.luac;$prefix/?.lua;;";

    #gzip  on;
	
    #shard.dict
	lua_shared_dict dict_locks_timer 100k;
	lua_shared_dict dict_rule_ip 10m;
	lua_shared_dict dict_rule_conn 10m;
	lua_shared_dict dict_rule_req 10m;
    # init lua
	init_by_lua_file lua/init.lua;
    init_worker_by_lua_file lua/timer.lua;
	
	access_by_lua '
		local rule_ip = require("lua.rule_ip")
		rule_ip.checkIp(0)
	';
	
    server {
        listen       80;
        server_name  localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;
		
		location = /favicon.ico {
			log_not_found off;
			access_log off;
		}
		
        #location / {
	#    default_type text/html;
        #    content_by_lua '
        #        ngx.say("<p>hello, world</p>")
        #    ';
        #}
    	location ~ ^/test {
          default_type 'text/html';
          charset utf-8;
          lua_code_cache on;
          #set $id $1;
          content_by_lua_file lua/test_redis.lua;
        } 
		
    	location ~ ^/lua {
          default_type 'text/html';
          charset utf-8;		  
          lua_code_cache on;
		  access_by_lua_block {
			require("lua.rule_conn").check_conn()
		  }
          content_by_lua_file lua/dict.lua;
		  log_by_lua_block {
			require("lua.rule_conn").logger()
		  }
        } 		
		
		location ~ ^/req {
          default_type 'text/html';
          charset utf-8;		  
          lua_code_cache on;
		  #access_by_lua_file lua/rule_traffic.lua;
		  access_by_lua_block {
			require("lua.rule_traffic").check_traffic()
		  }
          content_by_lua_file lua/dict.lua;
		  log_by_lua_block {
			require("lua.rule_traffic").logger()
		  }
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
